apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "splunk-otel-collector.fullname" . }}-config
  labels:
    {{- include "splunk-otel-collector.labels" . | nindent 4 }}
data:
  collector-config.yaml: |
    receivers:
      # Kubernetes Logs
      filelog:
        include:
          - /var/log/pods/*/*/*.log
        start_at: beginning
        include_file_path: true
        include_file_name: false
        operators:
          # Extract metadata from file path
          - type: regex_parser
            regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<pod_uid>[a-f0-9\-]+)\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
            parse_from: attributes["log.file.path"]
          # Extract log level
          - type: regex_parser
            regex: '(?P<time>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z) (?P<level>(TRACE|DEBUG|INFO|WARN|ERROR|FATAL))'
            parse_from: body
            output: extract_metadata
          # Parse JSON if the log line is in JSON format
          - type: json_parser
            if: body matches "^\\s*\\{"

      # Kubernetes Metrics
      kubeletstats:
        collection_interval: {{ .Values.collector.kubeletstats.interval | default "20s" }}
        auth_type: "serviceAccount"
        endpoint: "${K8S_NODE_NAME}:10250"
        metric_groups:
          - node
          - pod
          - container

      # OpenTelemetry Protocol Receiver for direct instrumentation
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

    processors:
      batch:
        timeout: 2s
        send_batch_size: 256

      memory_limiter:
        check_interval: 1s
        limit_percentage: 80
        spike_limit_percentage: 25

      resourcedetection:
        detectors: [env, system, gcp, ec2, azure]
        timeout: 5s

      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
          node_from_env_var: K8S_NODE_NAME
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.pod.name
            - k8s.deployment.name
            - k8s.statefulset.name
            - k8s.daemonset.name
            - k8s.cronjob.name
            - k8s.job.name
            - k8s.node.name
            - k8s.pod.uid
            - k8s.pod.start_time
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: connection

    exporters:
      splunk_hec:
        token: "${SPLUNK_HEC_TOKEN}"
        endpoint: "${SPLUNK_HEC_ENDPOINT}"
        source: "otel"
        sourcetype: "otel:metrics:{{ .Release.Namespace }}"
        index: "${SPLUNK_INDEX}"
        tls:
          insecure_skip_verify: {{ .Values.splunk.tlsSkipVerify | default false }}

      splunk_hec/logs:
        token: "${SPLUNK_HEC_TOKEN}"
        endpoint: "${SPLUNK_HEC_ENDPOINT}"
        source: "k8s"
        sourcetype: "kube:container:{{ .Release.Namespace }}"
        index: "${SPLUNK_INDEX}"
        tls:
          insecure_skip_verify: {{ .Values.splunk.tlsSkipVerify | default false }}

      # For troubleshooting
      {{- if .Values.collector.debug }}
      debug:
        verbosity: detailed
      {{- end }}

    service:
      telemetry:
        logs:
          level: {{ .Values.collector.logLevel | default "info" }}

      pipelines:
        logs:
          receivers: [filelog, otlp]
          processors: [memory_limiter, k8sattributes, resourcedetection, batch]
          exporters: [splunk_hec/logs]

        metrics:
          receivers: [kubeletstats, otlp]
          processors: [memory_limiter, k8sattributes, resourcedetection, batch]
          exporters: [splunk_hec]
